// Test ros control of iiwa

#include <tf/transform_listener.h>
#include <tf_conversions/tf_eigen.h>

#include <actionlib/client/simple_action_client.h>
#include <control_msgs/FollowJointTrajectoryAction.h>
#include <iiwa_msgs/JointPosition.h>
#include <geometry_msgs/PoseStamped.h>
#include <std_msgs/Time.h>

//#include <iiwa_ros.h>

void callback(const geometry_msgs::PoseStamped::ConstPtr &msg)
{
    ROS_WARN("Cartesian Pose: %f", msg->pose.position.x);
}

int main(int argc, char** argv){
    ros::init(argc, argv, "test_controller");
    ros::NodeHandle nh;

    iiwa_msgs::JointPosition position;
//    ros::Subscriber sub = nh.subscribe("/iiwa/state/CartesianPose", 1000, callback);
    ros::Publisher pub = nh.advertise<geometry_msgs::PoseStamped>("/iiwa/command/CartesianPose", 1000);
    ros::Publisher joint_pub = nh.advertise<iiwa_msgs::JointPosition>("/iiwa/command/JointPosition", 10)
    geometry_msgs::PoseStamped target_pose;
//    target_pose.pose.position.x = 0.55;
//    target_pose.pose.position.y = 0.036;
//    target_pose.pose.position.z = 0.57;

//    target_pose.pose.orientation.x = -0.015;
//    target_pose.pose.orientation.y = 1;
//    target_pose.pose.orientation.z = 0.0;
//    target_pose.pose.orientation.w = 0.0;

//    pub.publish(target_pose);


    actionlib::SimpleActionClient<control_msgs::FollowJointTrajectoryAction> execution_client("iiwa/"
                                                                                              "PositionJointInterfa"
                                                                                              "ce_trajectory_"
                                                                                              "controller/"
                                                                                              "follow_joint_"
                                                                                              "trajectory",
                                                                                              true);
    iiwa_msgs::JointPosition joint_msg;
    joint_msg.position.a1 = 0;
    joint_msg.position.a2 = 0.17;
    joint_msg.position.a3 = 0;
    joint_msg.position.a4 = -1.41;
    joint_msg.position.a5 = 0;
    joint_msg.position.a6 = 1.56;
    joint_msg.position.a7 = 0;
    joint_pub.publish(joint_msg);

    //boost::shared_ptr<std_msgs::Time const> arrived;
    ros::spin();
    return 0;
}
